{
    "swagger": "2.0", 
    "info": {
        "title": "Service Test Management", 
        "description": "This is Swagger UI environment generated for the TMF Service Test Management specification", 
        "version": "2.0"
    }, 
    "host": "serverRoot", 
    "basePath": "/tmf-api/serviceTestManagement/v2/", 
    "schemes": [
        "https"
    ], 
    "consumes": [
        "application/json"
    ], 
    "produces": [
        "application/json"
    ], 
    "paths": {
        "/serviceTest": {
            "get": {
                "operationId": "listServiceTest", 
                "summary": "List or find 'ServiceTest' objects", 
                "tags": [
                    "serviceTest"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma separated properties to display in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Ok", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceTest"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
					"401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createServiceTest", 
                "summary": "Creates a 'ServiceTest'", 
                "tags": [
                    "serviceTest"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTest_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceTest", 
                        "description": "The Service Test to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ServiceTest"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
					"401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceTest/{id}": {
            "get": {
                "operationId": "retrieveServiceTest", 
                "summary": "Retrieves a 'ServiceTest' by Id", 
                "tags": [
                    "serviceTest"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Service Test"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Ok", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceTest"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
					"401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchServiceTest", 
                "summary": "Updates partially a 'ServiceTest' by Id", 
                "tags": [
                    "serviceTest"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Service Test"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTest_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceTest", 
                        "description": "The Service Test to be updated"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/ServiceTest"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
					"401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteServiceTest", 
                "summary": "Deletes a 'ServiceTest' by Id", 
                "tags": [
                    "serviceTest"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Service Test"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
					"401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceTestSpecification": {
            "get": {
                "operationId": "listServiceTestSpecification", 
                "summary": "List or find 'ServiceTestSpecification' objects", 
                "tags": [
                    "serviceTestSpecification"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma separated properties to display in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Ok", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceTestSpecification"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
					"401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createServiceTestSpecification", 
                "summary": "Creates a 'ServiceTestSpecification'", 
                "tags": [
                    "serviceTestSpecification"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecification_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceTestSpecification", 
                        "description": "The Service Test Specification to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecification"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
					"401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceTestSpecification/{id}": {
            "get": {
                "operationId": "retrieveServiceTestSpecification", 
                "summary": "Retrieves a 'ServiceTestSpecification' by Id", 
                "tags": [
                    "serviceTestSpecification"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Service Test Specification"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Ok", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceTestSpecification"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
					"401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchServiceTestSpecification", 
                "summary": "Updates partially a 'ServiceTestSpecification' by Id", 
                "tags": [
                    "serviceTestSpecification"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Service Test Specification"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecification_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceTestSpecification", 
                        "description": "The Service Test Specification to be updated"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecification"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
					"401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteServiceTestSpecification", 
                "summary": "Deletes a 'ServiceTestSpecification' by Id", 
                "tags": [
                    "serviceTestSpecification"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Service Test Specification"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
					"401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/hub": {
            "post": {
                "operationId": "registerListener", 
                "summary": "Register a listener", 
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "name": "data", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Subscribed", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
					"405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
					"401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
					"409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener", 
                "summary": "Unregister a listener", 
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "name": "id", 
                        "type": "string", 
                        "required": true, 
                        "in": "path", 
                        "description": "The id of the registered listener"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "405": {
                        "description": "Method not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    }, 
    "definitions": {
        "ServiceTest": {
            "type": "object", 
            "description": "A service test is an entity that exists that exists for a controlled test invocation on a service. The service \ntest is executed according to a schedule and contains service test configuration parameters that are to be \napplied at execution time, and service test measures that result.", 
            "required": [
                "name"
            ], 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of the service test"
                }, 
                "endDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "The end date and time of the service test"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Hyperlink to access the service  test"
                }, 
                "id": {
                    "type": "string", 
                    "description": "The identifier of the service test"
                }, 
                "mode": {
                    "type": "string", 
                    "description": "An indication of whether the service test is running in \n\"PROACTIVE\" or \"ONDEMAND\" mode"
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the service test"
                }, 
                "startDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "The start date and time of the service test."
                }, 
                "state": {
                    "type": "string", 
                    "description": "The actual state the service test is in"
                }, 
                "relatedService": {
                    "$ref": "#/definitions/ServiceRef"
                }, 
                "testSpecification": {
                    "$ref": "#/definitions/ServiceTestSpecificationRef"
                }, 
                "testMeasure": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TestMeasure"
                    }
                }, 
                "characteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceTestCharacteristic"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ServiceTest_Create": {
            "type": "object", 
            "description": "A service test is an entity that exists that exists for a controlled test invocation on a service. The service \ntest is executed according to a schedule and contains service test configuration parameters that are to be \napplied at execution time, and service test measures that result.\nSkipped properties: id,href", 
            "required": [
                "name", 
                "relatedService", 
                "testSpecification"
            ], 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of the service test"
                }, 
                "endDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "The end date and time of the service test"
                }, 
                "mode": {
                    "type": "string", 
                    "description": "An indication of whether the service test is running in \n\"PROACTIVE\" or \"ONDEMAND\" mode"
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the service test"
                }, 
                "startDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "The start date and time of the service test."
                }, 
                "state": {
                    "type": "string", 
                    "description": "The actual state the service test is in"
                }, 
                "relatedService": {
                    "$ref": "#/definitions/ServiceRef"
                }, 
                "testSpecification": {
                    "$ref": "#/definitions/ServiceTestSpecificationRef"
                }, 
                "testMeasure": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TestMeasure"
                    }
                }, 
                "characteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceTestCharacteristic"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ServiceTest_Update": {
            "type": "object", 
            "description": "A service test is an entity that exists that exists for a controlled test invocation on a service. The service \ntest is executed according to a schedule and contains service test configuration parameters that are to be \napplied at execution time, and service test measures that result.\nSkipped properties: id,href,id,href", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of the service test"
                }, 
                "endDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "The end date and time of the service test"
                }, 
                "mode": {
                    "type": "string", 
                    "description": "An indication of whether the service test is running in \n\"PROACTIVE\" or \"ONDEMAND\" mode"
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the service test"
                }, 
                "startDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "The start date and time of the service test."
                }, 
                "state": {
                    "type": "string", 
                    "description": "The actual state the service test is in"
                }, 
                "relatedService": {
                    "$ref": "#/definitions/ServiceRef"
                }, 
                "testSpecification": {
                    "$ref": "#/definitions/ServiceTestSpecificationRef"
                }, 
                "testMeasure": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TestMeasure"
                    }
                }, 
                "characteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceTestCharacteristic"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ServiceTestSpecification": {
            "type": "object", 
            "description": "The service test specification describes the service test in terms of parameters to be configured and \nmeasures to be taken.", 
            "required": [
                "name"
            ], 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of a service test specification."
                }, 
                "href": {
                    "type": "string", 
                    "description": "Hyperlink to access a service test specification."
                }, 
                "id": {
                    "type": "string", 
                    "description": "Identifier of a service test specification."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of a service test specification."
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "A valid duration of a thing."
                }, 
                "testMeasureDefinition": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TestMeasureDefinition"
                    }
                }, 
                "relatedServiceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef", 
                    "description": "The related service specification"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ServiceTestSpecification_Create": {
            "type": "object", 
            "description": "The service test specification describes the service test in terms of parameters to be configured and \nmeasures to be taken.\nSkipped properties: id,href", 
            "required": [
                "name", 
                "relatedServiceSpecification"
            ], 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of a service test specification."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of a service test specification."
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "A valid duration of a thing."
                }, 
                "testMeasureDefinition": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TestMeasureDefinition"
                    }
                }, 
                "relatedServiceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef", 
                    "description": "The related service specification"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ServiceTestSpecification_Update": {
            "type": "object", 
            "description": "The service test specification describes the service test in terms of parameters to be configured and \nmeasures to be taken.\nSkipped properties: id,href,id,href,validFor", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of a service test specification."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of a service test specification."
                }, 
                "testMeasureDefinition": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TestMeasureDefinition"
                    }
                }, 
                "relatedServiceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef", 
                    "description": "The related service specification"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ServiceRef": {
            "type": "object", 
            "description": "The service related to the service test", 
            "required": [
                "id",
                "href"
            ], 
            "properties": {
                "href": {
                    "type": "string", 
                    "description": "Hyperlink to access a service."
                }, 
                "id": {
                    "type": "string", 
                    "description": "Identifier of a service."
                }, 
                "name": {
                    "type": "string", 
                    "description": "A name to describe a service."
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "ServiceTestSpecificationRef": {
            "type": "object", 
            "description": "The service test specification used by the service test.", 
            "required": [
                "href", 
                "id"
            ], 
            "properties": {
                "href": {
                    "type": "string", 
                    "description": "Hyperlink to access a service test specification."
                }, 
                "id": {
                    "type": "string", 
                    "description": "Identifier of a service test specification."
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "TestMeasure": {
            "type": "object", 
            "description": "A TestMeasureDefinition specifies a measure of a specific aspect of a product, service, or resource test, \nsuch as lost packets or connectivity status.", 
            "required": [
                "metricHref", 
                "metricName"
            ], 
            "properties": {
                "accuracy": {
                    "type": "number", 
                    "format": "float", 
                    "description": "The number of digits of accuracy captured for Metrics associated"
                }, 
                "captureDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "The date and time that capture the metric."
                }, 
                "captureMethod": {
                    "type": "string", 
                    "description": "\"The method used to capture the Metrics. \nNote: This may be replaced by a set of entities similar to the \nPerformance Monitoring Ref."
                }, 
                "metricDescription": {
                    "type": "string", 
                    "description": "Brief description of the metric"
                }, 
                "metricHref": {
                    "type": "string", 
                    "description": "Hyperlink to access a metric for detail information."
                }, 
                "metricName": {
                    "type": "string", 
                    "description": "The name of metric."
                }, 
                "unitOfMeasure": {
                    "type": "string", 
                    "description": "The unit of measure for the metric values, such as meters, \ncubic yards, kilograms [ISO 1000]."
                }, 
                "value": {
                    "type": "string", 
                    "description": "The value of Metric in the test. This also could be a documents \nto record all values got during the service test."
                }, 
                "valueType": {
                    "type": "string", 
                    "description": "A kind of value that the Metric value associated with a \nmetricValue can take on, such as numeric, text, and so forth."
                }, 
                "ruleViolation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/MeasureThresholdRuleViolation"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ServiceTestCharacteristic": {
            "type": "object", 
            "description": "The configuration of the service test is set by the service test characteristic.", 
            "required": [
                "name", 
                "value"
            ], 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "The name of the characteristic."
                }, 
                "value": {
                    "type": "string", 
                    "description": "The value of characteristic."
                }
            }
        }, 
        "MeasureThresholdRuleViolation": {
            "type": "object", 
            "description": "A measureThresholdRuleViolation is a violation of a rule that defines the in the \nMericDefMeasureThresholdRule.", 
            "required": [
                "name",
                "conformanceComparatorLower",
                "conformanceComparatorUpper",
                "conformanceTargetLower",
                "conformanceTargetUpper"
            ], 
			"properties": {
                "conformanceComparatorLower": {
                    "type": "string", 
                    "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to compare with the conformanceTargetLower."
                }, 
                "conformanceComparatorUpper": {
                    "type": "string", 
                    "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to compare with the conformanceTargetUpper."
                }, 
                "conformanceTargetLower": {
                    "type": "string", 
                    "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the lower limit. The value should be less than the conformanceTargetUpper. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
                }, 
                "conformanceTargetUpper": {
                    "type": "string", 
                    "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the Upper limit. The value should be greater than the conformanceTargetLower. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description for the MetricDefMeasureThresholdRule ."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name for the MetricDefMeasureThresholdRule ."
                }, 
                "numberOfAllowedCrossing": {
                    "type": "integer", 
                    "description": "The number of allowed crossing occurrences in reference to the \ntolerancePeriod without a consequence being initiated."
                }, 
                "thresholdRuleSeverity": {
                    "type": "string", 
                    "description": "A threshold can be generated in different severity levels. A \ncrossing for each level may require a different condition and possibly trigger a different consequence."
                }, 
                "tolerancePeriod": {
                    "type": "string", 
                    "description": "An interval of time of allowed crossing occurrences before a \nconsequence being initiated."
                }, 
                "appliedConsequence": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/AppliedConsequence"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "AppliedConsequence": {
            "type": "object", 
            "description": "An Applied Consequence defines the action (prescribed action or notification) to take when a \nMeasureThresholdRuleViolation occurs.", 
            "properties": {
                "appliedAction": {
                    "type": "string", 
                    "description": "The action for a violated threshold. This could be a hyperlink to \nthe action."
                }, 
                "description": {
                    "type": "string", 
                    "description": "A narrative that explains in detail what the consequence is."
                }, 
                "name": {
                    "type": "string", 
                    "description": "A word, term, or phrase by which Consequence is known and \ndistinguished from other MetricDefMeasureConsequences."
                }, 
                "repeatAction": {
                    "type": "string", 
                    "description": "An indicator use to specify that a consequence should cease \nbeing applied if a value is in the same range as the previous value or continue being applied if a value is in the same range as the previous value.  \nIf the repeatAcation is True, if the consequence is always applied as soon as the MetricMeasure value is in the range of values and if the repeatAcation is False, the consequence is applied only if the previous MetricMeasure value wasn\u00a1\u00aft in the same range."
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "TimePeriod": {
            "type": "object", 
            "description": "A base / value business entity used to represent a period of time between two timepoints.", 
            "required": [
                "endDateTime", 
                "startDateTime"
            ], 
            "properties": {
                "endDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "An instant of time, ending at the TimePeriod."
                }, 
                "startDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "An instant of time, starting at the TimePeriod"
                }
            }
        }, 
        "TestMeasureDefinition": {
            "type": "object", 
            "description": "A TestMeasureDefinition specifies a measure of a specific aspect of a product, service, or resource test, \nsuch as lost packets or connectivity status.", 
            "required": [
                "metricName", 
                "metricHref", 
                "name"
            ], 
            "properties": {
                "captureFrequency": {
                    "type": "string", 
                    "description": "The frequency of capture for the metric. Note: This may be \nreplaced by a set of entities similar to the Performance Monitoring."
                }, 
                "captureMethod": {
                    "type": "string", 
                    "description": "The method used to capture the Metric. Note: This may be \nreplaced by a set of entities similar to the Performance Monitoring."
                }, 
                "capturePeriod": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "A period of the capture."
                }, 
                "metricDescription": {
                    "type": "string", 
                    "description": "Brief description of the metric."
                }, 
                "metricHref": {
                    "type": "string", 
                    "description": "Hyperlink to access a metric for detail information."
                }, 
                "metricName": {
                    "type": "string", 
                    "description": "The name of a metric that in the test measure."
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the TestMeasureDefinition."
                }, 
                "unitOfMeasure": {
                    "type": "string", 
                    "description": "Name of a service test specification."
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "A valid duration of a thing."
                }, 
                "valueType": {
                    "type": "string", 
                    "description": "A kind of value that the Metric value can take on, such as \nnumeric, text, and so forth."
                }, 
                "thresholdRule": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/MetricDefMeasureThresholdRule"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ServiceSpecificationRef": {
            "type": "object", 
            "description": "The related service specification.", 
            "required": [
                "href", 
                "id"
            ], 
            "properties": {
                "href": {
                    "type": "string", 
                    "description": "Hyperlink to access service specification."
                }, 
                "id": {
                    "type": "string", 
                    "description": "The identifier of a service specification."
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "MetricDefMeasureThresholdRule": {
            "type": "object", 
            "description": "A MetricDefMeasureThresholdRule is a rule that defines the condition (raise or clear) to achieve to apply \nconsequences when a threshold is crossed or ceased to be crossed. It also defines the severity of the \nraise or clear of the threshold.", 
            "required": [
                "name",
                "conformanceComparatorLower",
                "conformanceComparatorUpper",
                "conformanceTargetLower",
                "conformanceTargetUpper"
            ], 
			"properties": {
                "conformanceComparatorLower": {
                    "type": "string", 
                    "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to Service Test Management API REST Specification compare with the conformanceTargetLower."
                }, 
                "conformanceComparatorUpper": {
                    "type": "string", 
                    "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to compare with the conformanceTargetUpper."
                }, 
                "conformanceTargetLower": {
                    "type": "string", 
                    "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the lower limit. The value should be less than the conformanceTargetUpper. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
                }, 
                "conformanceTargetUpper": {
                    "type": "string", 
                    "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the Upper limit. The value should be greater than the conformanceTargetLower. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description for the MetricDefMeasureThresholdRule ."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name for the MetricDefMeasureThresholdRule ."
                }, 
                "numberOfAllowedCrossing": {
                    "type": "string", 
                    "description": "The number of allowed crossing occurrences in reference to the \ntolerancePeriod without a consequence being initiated."
                }, 
                "thresholdRuleSeverity": {
                    "type": "string", 
                    "description": "A threshold can be generated in different severity levels. A \ncrossing for each level may require a different condition and possibly trigger a different consequence."
                }, 
                "tolerancePeriod": {
                    "type": "string", 
                    "description": "A String. An interval of time of allowed crossing occurrences before a consequence being initiated."
                }, 
                "consequence": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/MetricDefMeasureConsequence"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "MetricDefMeasureConsequence": {
            "type": "object", 
            "description": "A MetricDefMeasureConsequence defines the action (prescribed action or notification) to take when a \nMetricDefMeasureThresholdRule is crossed.", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A narrative that explains in detail what the consequence is."
                }, 
                "name": {
                    "type": "string", 
                    "description": "A word, term, or phrase by which a \nMetricDefMeasureConsequence is known and distinguished from other MetricDefMeasureConsequences."
                }, 
                "prescribeAction": {
                    "type": "string", 
                    "description": "Recommended remedy for a violated threshold. This could be \nthe hyperlink to the action."
                }, 
                "repeatAction": {
                    "type": "string", 
                    "description": "An indicator use to specify that a consequence should cease \nbeing applied if a value is in the same range as the previous value  or continue being applied if a value is in the same range as the previous value.   \nIf the repeatAcation is True, if the consequence is always applied as soon as the MetricMeasure value is in the range of values and if the repeatAcation is False, the consequence is applied only if the previous MetricMeasure value wasn\u00a1\u00aft in the same range."
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "A valid duration of a thing."
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "EventSubscription": {
            "required": [
                "id", 
                "callback"
            ], 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Id of the listener"
                }, 
                "callback": {
                    "type": "string", 
                    "description": "The callback being registered."
                }, 
                "query": {
                    "type": "string", 
                    "description": "additional data to be passed"
                }
            }
        }, 
        "EventSubscriptionInput": {
            "required": [
                "callback"
            ], 
            "properties": {
                "callback": {
                    "type": "string", 
                    "description": "The callback being registered."
                }, 
                "query": {
                    "type": "string", 
                    "description": "additional data to be passed"
                }
            }
        }, 
        "Error": {
            "required": [
                "code", 
                "reason"
            ], 
            "properties": {
                "code": {
                    "type": "integer", 
                    "description": "Application related code."
                }, 
                "reason": {
                    "type": "integer", 
                    "description": "Text that explains the reason for error."
                }, 
                "message": {
                    "type": "string", 
                    "description": "(optional) Text that provide more details and corrective actions related to the error."
                }, 
                "status": {
                    "type": "integer", 
                    "description": "(optional) http error code extension like 400-2"
                }, 
                "referenceError": {
                    "type": "string", 
                    "description": "(optional) A URL to online documentation that provides more information about the error."
                }, 
                "@type": {
                    "type": "string", 
                    "description": "(optional) The class type of a REST resource."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "(optional) A link to the schema describing a REST resource."
                }
            }
        }
    }
}
