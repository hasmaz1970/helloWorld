
{
  "swagger": "2.0",
  "info": {
    "description": "## TMF API Reference : TMF 648 - Quote Management\n\n### Release  17.5 - January 2018\n\nThe customer Quote API provides a standardized mechanism for placing a customer quote with all of the necessary quote parameters. The API consists of a simple set of operations that interact with CRM/Order Negotiation systems in a consistent manner. A customer quote is created based on a product offer that is defined in a catalog. The quote identifies the product or set of products that are available to a customer, and includes characteristics such as pricing (eventually special pricing for the customer described in the quote), product options and agreement.\n\nSupplier Quote is not managed in the scope of this document.\n\n### Resources\n- Quote\n- Hub\n\n### Operations\nQuote API performs the following operations :\n- Retrieval of a customer quote or a collection of customer quote depending on filter criteria\n- Partial update of a customer quote (including updating rules)\n- Creation of a customer quote (including versioning, default values and creation rules)\n- Deletion of customer quote (for administration purposes)\n- Notification of events on quote\n\t- Quote creation\n\t- Quote removal\n\t- Quote state change\n\t- Quote value change used to notify that any data in an quote has just changed\n\t- Quote information required used to notify that some data in the quote need to be filled / are\n\tmissing\n\t- Quote is a pending state waiting approval (for the whole quote or only for quote item)\n\t- quote is accepted by the customer but there is a least one agreement to be signed",
    "version": "2.0.0",
    "title": "API Quote"
  }, 
  "host": "serverRoot",
  "basePath":	"/tmf-api/quoteManagement/v2/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json;charset=utf-8"
  ],
  "produces": [
    "application/json;charset=utf-8"
  ],
  "tags": [
  
    {
      "name": "Quote",
      "description": "Quote can be used to negotiate service and product acquisition or modification between a customer and a service provider. Quote contain list of quote items, a reference to customer (partyRole), a list of productOffering and attached prices and conditions."
    },
    {
      "name": "Hub",
      "description": "Hub allows to register notification subscription."
    }
  ],
  "paths": {
      "/quote": {
      "post": {
        "tags": [
           "Quote"
        ],        
        "operationId": "quoteCreate",
        "summary": "Create a quote",
        "description": "This operation is used to create a new quote (V1.0) or a new version of an existing quote (Vn.n n=> 1)\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "Quote",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/QuotePOSTRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Quote"
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
           "Quote"
        ],        
        "operationId": "quoteFind",
        "summary": "List quotes",
        "description": "This operation is used to retrieve quote information using filter criteria.\nIf the version is not filled, by default only the most current version is returned.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "For attribute selection",
            
              "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            
              "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            
              "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
              "$ref": "#/definitions/Quote"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
              "type": "integer",
              "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
              "type": "integer",
              "format": "int32"
              }
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    },
      "/quote/{id}": {
      "get": {
        "tags": [
           "Quote"
        ],        
        "operationId": "quoteGet",
        "summary": "Retrieve a quote",
        "description": "This operation is used to retrieve quote information using the ID. If the version is not filled, by default only the most current version is returned.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Quote"
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
           "Quote"
        ],        
        "operationId": "quotePatch",
        "summary": "Patch a quote",
        "description": "This operation is used to modify quote and/or their items.\nBy default PATCH will be acting only on the latest version of the Resource.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Quote",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/Quote"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Quote"
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
           "Quote"
        ],        
        "operationId": "quoteDelete",
        "summary": "Delete a quote",
        "description": "This operation is used to Delete a quote.\nShould be used only for ADMIN reason.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    },
      "/hub": {
      "post": {
        "tags": [
           "Hub"
        ],        
        "operationId": "hubCreate",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "Hub",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/HubInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Hub"
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    },
      "/hub/{hubId}": {
      "delete": {
        "tags": [
           "Hub"
        ],        
        "operationId": "hubDelete",
        "summary": "Unregister a listener",
        "description": "Clears the communication endpoint address that was set by creating the Hub\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    }
  },
"definitions": {
  
    "QuoteState": {
      "description": "",
      
      "type": "string",
      "enum": [
        "inProgress",
        "pending",
        "cancelled",
        "approved",
        "accepted",
        "rejected"
      ]
	  
    },
    "QuoteItemState": {
      "description": "",
      
      "type": "string",
      "enum": [
        "inProgress",
        "pending",
        "approved",
        "rejected"
      ]
	  
    },

    "ErrorRepresentation": {
      "description": "Standard TMF error representation",

      
      "required": [
          
            "code",
            "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Application related code (as defined in the API or from a common list)",
              "type": "integer",
              "format": "int32"
        },
        "reason": {
          "description": "Text that explains the reason for error. This can be shown to a client user.",
              "type": "string"
        },
        "message": {
          "description": "Text that provide mode details and corrective actions related to the error.  This can be shown to a client user.",
              "type": "string"
        },
        "status": {
          "description": "Http error code extension like 400-2 for example",
              "type": "string"
        },
        "referenceError": {
          "description": "url pointing to documentation describing the error",
              "type": "string"
        },
        "@type": {
          "description": "Type of the REST resource",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
              "type": "string"
        }
      }
      
    },

    "TimePeriod": {
      "description": "",

      
      "required": [
          
            "startDate",
            "endDate"
      ],
      "type": "object",
      "properties": {
        "startDate": {
          "description": "",
              "type": "string",
              "format": "date-time"
        },
        "endDate": {
          "description": "",
              "type": "string",
              "format": "date-time"
        }
      }
      
    },

    "Authorization": {
      "description": "If special discount or special product or service tariff need an approval for ISP Sales\nrepresentative n+1 or n+2 – these approvals are described there. This is approval at the whole quote\nlevel.",

      
      "type": "object",
      "properties": {
        "authorizationName": {
          "description": "Name of the required authorization",
              "type": "string"
        },
        "authorizationState": {
          "description": "authorization state (approved or declined)",
              "type": "string"
        },
        "authorizationRequestedDate": {
          "description": "Date when the authorization is requested for.",
              "type": "string",
              "format": "date"
        },
        "authorizationGivenDate": {
          "description": "Date when the authorization (approved or declined) has been done.",
              "type": "string",
              "format": "date"
        },
        "authorizationSignatureRepresentation": {
          "description": "to describe a digital or manual signature",
              "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the authorization.",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
              "type": "string"
        },
        "attachment": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/AttachmentRef"
          }
        },
        "approver": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/RelatedPartyRef"
          }
        }
      }
      
    },

    "AttachmentRef": {
      "description": "Complements the description of an element (for instance a product) through video, pictures...",

      
      "type": "object",
      "properties": {
        "description": {
          "description": "Type of the attachment  (ex: pdf)",
              "type": "string"
        },
        "href": {
          "description": "Reference of the attachment",
              "type": "string"
        },
        "id": {
          "description": "Id of the attachment",
              "type": "string"
        },
        "url": {
          "description": "Uniform Resource Locator, is a web page address (a subset of URI).",
              "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the attachment",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource",
              "type": "string"
        }
      }
      
    },

    "PriceAlteration": {
      "description": "Is an amount, usually of money, that modifies the price charged for an order item",

      
      "required": [
          
            "priceType"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "A short descriptive name such as \"Monthly discount\".",
              "type": "string"
        },
        "description": {
          "description": "A narrative that explains in detail the semantics of this order item price alteration.",
              "type": "string"
        },
        "priceType": {
          "description": "A category that describes the price such as recurring, one time and usage.",
              "type": "string"
        },
        "unitOfMeasure": {
          "description": "Could be minutes, GB...",
              "type": "string"
        },
        "recurringChargePeriod": {
          "description": "Could be month, week...",
              "type": "string"
        },
        "applicationDuration": {
          "description": "Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge).",
              "type": "integer",
              "format": "int32"
        },
        "priority": {
          "description": "Priority level for applying this alteration among all the defined alterations on the order item price",
              "type": "integer",
              "format": "int32"
        },
        "@type": {
          "description": "Indicates the (class) type of the price alteration",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
              "type": "string"
        },
        "price": {
          
              "$ref": "#/definitions/Price"
        }
      }
      
    },

    "Price": {
      "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration",

      
      "type": "object",
      "properties": {
        "taxIncludedAmount": {
          
              "$ref": "#/definitions/Money"
        },
        "dutyFreeAmount": {
          
              "$ref": "#/definitions/Money"
        },
        "taxRate": {
          "description": "Tax rate",
              "type": "number",
              "format": "float"
        },
        "percentage": {
          "description": "Percentage to apply only for ProdOfferPriceAlteration",
              "type": "number",
              "format": "float"
        },
        "@type": {
          "description": "Indicates the (class) type of the price",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
              "type": "string"
        }
      }
      
    },

    "QuoteItem": {
      "description": "A quote items describe an action to be performed on a productOffering or a product in order to get pricing elements and condition",

      
      "required": [
          
            "id",
            "state",
            "action"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the quote item (generally it is a sequence number 01, 02, 03, ...).",
              "type": "string"
        },
        "state": {
          
           "$ref": "#/definitions/QuoteItemState"
        },
        "action": {
          "description": "Action to be perfomed on this quote item (add, modify, remove, etc.).",
              "type": "string"
        },
        "quantity": {
          "description": "Indicates the quantity to be quoted",
              "type": "integer",
              "format": "int32"
        },
        "@type": {
          "description": "Indicates the base (class) type of the quote Item.",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
              "type": "string"
        },
        "quoteItemRelationship": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/QuoteItemRelationship"
          }
        },
        "attachment": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/AttachmentRef"
          }
        },
        "quoteItemAuthorization": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/Authorization"
          }
        },
        "note": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/Note"
          }
        },
        "relatedParty": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "appointment": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/AppointmentRef"
          }
        },
        "productOffering": {
          
              "$ref": "#/definitions/ProductOfferingRef"
        },
        "quoteItemPrice": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/QuotePrice"
          }
        },
        "product": {
          
              "$ref": "#/definitions/Product"
        }
      }
      
    },

    "RelatedPartyRef": {
      "description": "A related party defines party or party role linked to a quote.",

      
      "required": [
          
            "role"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of a related party",
              "type": "string"
        },
        "href": {
          "description": "Reference of the related party, could be a party reference or a party role reference.",
              "type": "string"
        },
        "role": {
          "description": "Role of the related party",
              "type": "string"
        },
        "name": {
          "description": "Name of the related party",
              "type": "string"
        },
        "@referredType": {
          "description": "Indicates the base (class) type of the party.",
              "type": "string"
        }
      }
      
    },

    "Note": {
      "description": "Extra information about the quote.",

      
      "required": [
          
            "text"
      ],
      "type": "object",
      "properties": {
        "date": {
          "description": "Date of the note",
              "type": "string",
              "format": "date-time"
        },
        "author": {
          "description": "Author of the note",
              "type": "string"
        },
        "text": {
          "description": "Text of the note",
              "type": "string"
        }
      }
      
    },

    "Product": {
      "description": "Configure the product characteristics (only configurable characteristics and necessary only if a non default value is selected) and/or identify the product that needs to be modified/deleted",

      
      "required": [
          
            "href",
            "id"
      ],
      "type": "object",
      "properties": {
        "href": {
          "description": "Reference of the product",
              "type": "string"
        },
        "id": {
          "description": "Unique identifier of the product",
              "type": "string"
        },
        "name": {
          "description": "Name of the product",
              "type": "string"
        },
        "productRelationship": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/ProductRelationship"
          }
        },
        "place": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/Place"
          }
        },
        "characteristic": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/ProductCharacteristic"
          }
        },
        "relatedParty": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "productSpecification": {
          
              "$ref": "#/definitions/ProductSpecificationRef"
        }
      }
      
    },

    "ProductCharacteristic": {
      "description": "Characteristics of the product to be quoted",

      
      "required": [
          
            "name",
            "value"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the characteristic",
              "type": "string"
        },
        "value": {
          "description": "Value of the characteristic",
              "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of resource",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "This field provided a link to the schema describing this REST resource",
              "type": "string"
        }
      }
      
    },

    "Quote": {
      "description": "A quote which can be used to negotiate service and product acquisition or modification between\na customer and a service provider",

      
        "discriminator": "id",
      
      "required": [
          
            "quoteItem"
      ],
      "type": "object",
      "properties": {
        "href": {
          "description": "Hyperlink to access the quote",
              "type": "string"
        },
        "id": {
          "description": "ID attributed by quoting system",
              "type": "string"
        },
        "externalId": {
          "description": "ID given by the consumer and only understandable by him (to facilitate his searches afterwards)",
              "type": "string"
        },
        "version": {
          "description": "Quote version because if the customer rejected the quote but negociations still open a new version of the quote is managed",
              "type": "string"
        },
        "description": {
          "description": "Description of the quote",
              "type": "string"
        },
        "category": {
          "description": "Used to categorize the quote from a business perspective that can be useful for the CRM system (e.g. “enterprise”, “residential”, ...)",
              "type": "string"
        },
        "state": {
          
           "$ref": "#/definitions/QuoteState"
        },
        "quoteDate": {
          "description": "Date when the quote was created",
              "type": "string",
              "format": "date-time"
        },
        "expectedQuoteCompletionDate": {
          "description": "This is expected date - from quote requester - to have a response for this quote.",
              "type": "string",
              "format": "date"
        },
        "expectedFulfillmentStartDate": {
          "description": "This is the date wished by the requester to have the requested quote item delivered",
              "type": "string",
              "format": "date"
        },
        "effectiveQuoteCompletionDate": {
          "description": "Date when the quoted was Cancelled or Rejected or Accepted",
              "type": "string",
              "format": "date-time"
        },
        "validFor": {
          
              "$ref": "#/definitions/TimePeriod"
        },
        "note": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/Note"
          }
        },
        "billingAccount": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/BillingAccountRef"
          }
        },
        "agreement": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/AgreementRef"
          }
        },
        "quoteAuthorization": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/Authorization"
          }
        },
        "relatedParty": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "contactMedium": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/ContactMedium"
          }
        },
        "quoteItem": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/QuoteItem"
          }
        },
        "quoteTotalPrice": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/QuotePrice"
          }
        },
        "@baseType": {
          "description": "Indicates the base (class) type of the quote.",
              "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the quote.",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource.",
              "type": "string"
        }
      }
      
    },

    "BillingAccountRef": {
      "description": "A BillingAccount is a detailed description of a bill structure.",

      
      "required": [
          
            "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the billing account",
              "type": "string"
        },
        "href": {
          "description": "Reference of the billing account",
              "type": "string"
        },
        "name": {
          "description": "Name of the billing account",
              "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the billing account.",
              "type": "string"
        }
      }
      
    },

    "AgreementRef": {
      "description": "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",

      
      "required": [
          
            "id"
      ],
      "type": "object",
      "properties": {
        "href": {
          "description": "Reference of the agreement",
              "type": "string"
        },
        "id": {
          "description": "Id of the agreement",
              "type": "string"
        },
        "name": {
          "description": "Name of the agreement",
              "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the agreement",
              "type": "string"
        }
      }
      
    },

    "ProductOfferingRef": {
      "description": "A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information",

      
      "required": [
          
            "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product offering",
              "type": "string"
        },
        "href": {
          "description": "Reference of the product offering",
              "type": "string"
        },
        "name": {
          "description": "Name of the product offering.",
              "type": "string"
        },
        "@referredType": {
          "description": "Indicate the class (type) of product offering.",
              "type": "string"
        }
      }
      
    },

    "ProductRelationship": {
      "description": "Represents a relationship between products - which potentially holds an entire product object or a product reference (with partial content).",

      
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of the product relationship. It can be :\n     - \"bundled\" if the product is a bundle and you want to describe the \"bundled\" products inside this bundle\n     - \"reliesOn\" if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product)\n\"targets\" or \"isTargeted\" (depending on the way of expressing the link) for any other kind of links that may be useful.",
              "type": "string"
        },
        "product": {
          
              "$ref": "#/definitions/Product"
        }
      }
      
    },

    "ContactMedium": {
      "description": "Indicates the contact medium that could be used to contact the party",

      
      "required": [
          
            "type"
      ],
      "type": "object",
      "properties": {
        "preferred": {
          "description": "If true, indicates that is the preferred contact medium.",
              "type": "boolean"
        },
        "type": {
          "description": "Type of the contact medium, such as: email address, telephone number, postal address.",
              "type": "string"
        },
        "validFor": {
          
              "$ref": "#/definitions/TimePeriod"
        },
        "characteristic": {
          
              "$ref": "#/definitions/MediumCharacteristic"
        }
      }
      
    },

    "QuotePrice": {
      "description": "Description of price and discount awarded.",

      
      "required": [
          
            "priceType"
      ],
      "type": "object",
      "properties": {
        "priceType": {
          "description": "indicate if the price is for recurrent or no-recurrent charge",
              "type": "string"
        },
        "recurringChargePeriod": {
          "description": "Used for recurring charge to indicate period (month, week, etc..)",
              "type": "string"
        },
        "unitOfMeasure": {
          "description": "Unit of Measure if price depending on it (Gb, SMS volume, etc..).",
              "type": "string"
        },
        "name": {
          "description": "Name of the quote /quote item price",
              "type": "string"
        },
        "description": {
          "description": "Description of the quote/quote item price.",
              "type": "string"
        },
        "@type": {
          "description": "Indicates the base (class) type of the quote price",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "link to the schema describing this REST resource",
              "type": "string"
        },
        "priceAlteration": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/PriceAlteration"
          }
        },
        "price": {
          
              "$ref": "#/definitions/Price"
        }
      }
      
    },

    "MediumCharacteristic": {
      "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization).",

      
      "type": "object",
      "properties": {
        "city": {
          "description": "The city",
              "type": "string"
        },
        "country": {
          "description": "The country",
              "type": "string"
        },
        "emailAddress": {
          "description": "Full email address in standard format",
              "type": "string"
        },
        "type": {
          "description": "Type of medium (fax, mobile phone...).",
              "type": "string"
        },
        "postCode": {
          "description": "Postcode",
              "type": "string"
        },
        "stateOrProvince": {
          "description": "State or Province",
              "type": "string"
        },
        "street1": {
          "description": "Describe the street - part 1",
              "type": "string"
        },
        "street2": {
          "description": "Describe the street - part 2 - . Complementary street description",
              "type": "string"
        },
        "faxNumber": {
          "description": "The fax number of the contact.",
              "type": "string"
        },
        "phoneNumber": {
          "description": "The primary phone number of the contact.",
              "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the medium characteristic",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
              "type": "string"
        }
      }
      
    },

    "AppointmentRef": {
      "description": "Appointment description if any required for this quote.",

      
      "required": [
          
            "id"
      ],
      "type": "object",
      "properties": {
        "href": {
          "description": "Hyperlink to access the appointment",
              "type": "string"
        },
        "id": {
          "description": "Identifier of the appointment",
              "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the appointment.",
              "type": "string"
        }
      }
      
    },

    "ProductSpecificationRef": {
      "description": "A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",

      
        "discriminator": "id",
      
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product specification",
              "type": "string"
        },
        "href": {
          "description": "Reference of the product specification",
              "type": "string"
        },
        "version": {
          "description": "Version of the product specification",
              "type": "string"
        },
        "name": {
          "description": "Name of the product specification",
              "type": "string"
        },
        "targetResourceSchema": {
          
              "$ref": "#/definitions/TargetResourceSchema"
        }
      }
      
    },

    "Money": {
      "description": "A base / value business entity used to represent money",

      
      "required": [
          
            "value",
            "unit"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "A positive floating point number",
              "type": "number",
              "format": "float"
        },
        "unit": {
          "description": "Currency (ISO4217 norm uses 3 letters to define the currency",
              "type": "string"
        }
      }
      
    },

    "Place": {
      "description": "Place defines the places where the quoted products are sold or delivered",

      
        "discriminator": "id",
      
      "required": [
          
            "role"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the place",
              "type": "string"
        },
        "href": {
          "description": "Unique reference of the place",
              "type": "string"
        },
        "name": {
          "description": "A user-friendly name for the place, such as 'Paris Store', 'Main Home'",
              "type": "string"
        },
        "role": {
          "description": "Role of the place (for instance: 'home delivery', 'shop retrieval').",
              "type": "string"
        },
        "@referredType": {
          "description": "Type of Place",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
              "type": "string"
        }
      }
      
    },

    "TargetResourceSchema": {
      "description": "Target to the schema describing the product spec resource (and type)",

      
      "type": "object",
      "properties": {
        "@type": {
          "description": "Indicates the (class) type of resource",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "This field provided a link to the schema describing this REST resource.",
              "type": "string"
        }
      }
      
    },

    "QuoteItemRelationship": {
      "description": "Used to describe relationship between quote item. These relationships could have an impact on pricing and conditions.",

      
      "required": [
          
            "id",
            "type"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the related order item (must be in the same quote).",
              "type": "string"
        },
        "type": {
          "description": "Relationship type as relies on, bundles, etc...",
              "type": "string"
        }
      }
      
    },

    "QuoteItemPOSTRequest": {
      "description": "This structure is used to describe Quote item only in the POST operation for the request.",

      
      "required": [
          
            "id",
            "action"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the quote item (generally it is a sequence number 01, 02, 03, ...).",
              "type": "string"
        },
        "action": {
          "description": "Action to be perfomed on this quote item (add, modify, remove, etc.).",
              "type": "string"
        },
        "quantity": {
          "description": "Indicates the quantity to be quoted",
              "type": "integer",
              "format": "int32",
  	
  	          "default": 1
        },
        "@type": {
          "description": "Indicates the base (class) type of the quote Item.",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
              "type": "string"
        },
        "quoteItemRelationship": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/QuoteItemRelationship"
          }
        },
        "attachment": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/AttachmentRef"
          }
        },
        "note": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/Note"
          }
        },
        "relatedParty": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "appointment": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/AppointmentRef"
          }
        },
        "productOffering": {
          
              "$ref": "#/definitions/ProductOfferingRef"
        },
        "product": {
          
              "$ref": "#/definitions/Product"
        }
      }
      
    },

    "QuotePOSTRequest": {
      "description": "This structure is used only in the POST operation for the request.",

      
      "required": [
          
            "quoteItem"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the quote - Must be only used if version > 1\nFor a quote in V1.0 POST should be used without specifying the id, the quote system is in charge of generating the id. For a quote creation in other version than V1.0, the id should be specified",
              "type": "string"
        },
        "externalId": {
          "description": "ID given by the consumer and only understandable by him (to facilitate his searches afterwards)",
              "type": "string"
        },
        "version": {
          "description": "Quote version because if the customer rejected the quote but negociations still open a new version of the quote is managed",
              "type": "string"
        },
        "description": {
          "description": "Description of the quote",
              "type": "string"
        },
        "category": {
          "description": "Used to categorize the quote from a business perspective that can be useful for the CRM system (e.g. “enterprise”, “residential”, ...)",
              "type": "string"
        },
        "expectedQuoteCompletionDate": {
          "description": "This is expected date - from quote requester - to have a response for this quote.",
              "type": "string",
              "format": "date"
        },
        "expectedFulfillmentStartDate": {
          "description": "This is the date wished by the requester to have the requested quote item delivered",
              "type": "string",
              "format": "date"
        },
        "validFor": {
          
              "$ref": "#/definitions/TimePeriod"
        },
        "note": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/Note"
          }
        },
        "billingAccount": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/BillingAccountRef"
          }
        },
        "agreement": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/AgreementRef"
          }
        },
        "relatedParty": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "contactMedium": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/ContactMedium"
          }
        },
        "quoteItem": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/QuoteItemPOSTRequest"
          }
        },
        "@baseType": {
          "description": "Indicates the base (class) type of the quote.",
              "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the quote.",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource.",
              "type": "string"
        }
      }
      
    },

    "Hub": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",

      
        "discriminator": "id",
      
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the hub",
              "type": "string"
        },
        "callback": {
          "description": "The callback being registered",
              "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
              "type": "string"
        }
      }
      
    },

    "HubInput": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",

      
      "type": "object",
      "properties": {
        "callback": {
          "description": "The callback being registered",
              "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
              "type": "string"
        }
      }
      
    }
  }
}
	